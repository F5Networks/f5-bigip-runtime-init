image: ${ARTIFACTORY_SERVER}/dockerhub-remote/node:12

stages:
    - process
    - atg-shared-checks
    - test
    - build
    - functional_test_init
    - functional_test_execute
    - functional_test_cleanup
    - publish
    - release_publish

include:
  - project: automation-toolchain/atg-shared-templates
    file: security/base.gitlab-ci.yml

.helpers: &helpers |
    function validate () {
        "$@"
        if [[ $? -ne 0 ]]; then exit 1; fi
    }

before_script:
    - *helpers

variables:
    AWS_ACCESS_KEY_ID: "$AWS_ACCESS_KEY_ID"
    AWS_SECRET_ACCESS_KEY: "$AWS_SECRET_ACCESS_KEY"
    ARM_CLIENT_ID: "$AZURE_COMMERCIAL_CLIENT_ID"
    ARM_CLIENT_SECRET: "$AZURE_COMMERCIAL_CLIENT_SECRET"
    ARM_SUBSCRIPTION_ID: "$AZURE_COMMERCIAL_SUBSCRIPTION_ID"
    ARM_TENANT_ID: "$AZURE_COMMERCIAL_TENANT_ID"
    ARM_CLIENT_ID_GOV: "$AZURE_GOV_CLIENT_ID"
    ARM_CLIENT_SECRET_GOV: "$AZURE_GOV_CLIENT_SECRET"
    ARM_SUBSCRIPTION_ID_GOV: "$AZURE_GOV_SUBSCRIPTION_ID"
    ARM_TENANT_ID_GOV: "$AZURE_GOV_TENANT_ID"
    GOOGLE_PROJECT_ID: "$GOOGLE_PROJECT_ID"
    GOOGLE_CREDENTIALS: "$GOOGLE_CREDENTIALS"
    GIT_SECRETS_VERSION: '1.3.0'
    GIT_SECRETS_PKG_URL: "https://github.com/awslabs/git-secrets/archive/${GIT_SECRETS_VERSION}.tar.gz"
    ATG_IMG_REGISTRY_URL: ${ARTIFACTORY_SERVER}/dockerhub-remote
    DOCKER_AUTH_CONFIG: ${DOCKER_AUTH_CONFIG}
    DEPLOYMENT_TOOL_IMAGE_V2: ${ARTIFACTORY_SERVER}/ecosystems-cloudsolutions-docker-dev/deployment-tool-v2:latest
    MONGODB_IMAGE: ${ARTIFACTORY_SERVER}/dockerhub-remote/mongo:4.0-xenial
    EXTENSION_METADATA_FILE: "metadata.json"

# Cleanup development RPM's on CDN when branch no longer present on gitlab
cleanup_publish_rpms_dev_cdn:
    stage: process
    only:
        variables:
            - $CLEANUP_DEVELOP_CDN == "true"
    except:
        variables:
            - $RUN_FUNCTIONAL_TESTS == "true"
            - $PUBLISH_RPM == "true"
    script:
        # install jq
        - echo "deb http://archive.debian.org/debian stretch main" > /etc/apt/sources.list
        - apt-get update
        - apt-get install -y jq
        # find branches in project and cdn
        - CDN_FOLDER="f5-bigip-runtime-init"
        - AUTH_OPTS="--username ${CDN_SVC_ACCOUNT_USER} --password ${CDN_SVC_ACCOUNT_PWD} --non-interactive"
        - svn co ${F5_CDN_SVN_ROOT}/cloudsolutions/${CDN_FOLDER} ${AUTH_OPTS}
        - curl -k -H "PRIVATE-TOKEN:${DAILY_TEST_TOKEN}" "https://${GITLAB_URL}/api/v4/projects/${CI_PROJECT_ID}/repository/branches" | jq -r .[].name > branches.txt
        - cat branches.txt
        - ls ${CDN_FOLDER}/develop > cdn_branches.txt
        - cat cdn_branches.txt
        - diff=$(comm -23 cdn_branches.txt branches.txt)
        - echo "Removing directories:$diff"
        - cd ${CDN_FOLDER}/develop
        - for d in $diff; do svn rm $d; done
        - changed_files_count=$(svn diff --summarize | wc -l)
        - if [[ $changed_files_count -ge 1 ]]; then svn commit -m "F5 automation templates project automation - ${CI_COMMIT_REF_NAME}" ${AUTH_OPTS}; else echo "Develop directories unchanged"; fi

    tags:
        - cm-official-docker-executor

# lint package
lint_package:
    stage: test
    script:
        # linter
        - npm install --unsafe-perm
        - npm run lint
    tags:
        - cm-official-docker-executor
    except:
        refs:
            - schedules
        variables:
            - $CLEANUP_DEVELOP_CDN == "true"

# audit packages for vulnerabilities
test_audit:
    stage: test
    script:
        # npm audit - uses custom audit processor wrapper
        - npm install --unsafe-perm
        - npm run audit --production
    tags:
        - cm-official-docker-executor
    except:
        refs:
            - schedules
        variables:
            - $CLEANUP_DEVELOP_CDN == "true"

# run unit tests --uncomment
unit_tests:
    stage: test
    image: ${ARTIFACTORY_SERVER}/dockerhub-remote/node:8
    script:
        - npm install --unsafe-perm
        - npm run test
    tags:
        - cm-official-docker-executor
    except:
        refs:
            - schedules
        variables:
            - $CLEANUP_DEVELOP_CDN == "true"
    allow_failure: true

# check for disallowed content in all files, this supplements
# the native pre-receive push rules built into GitLab for secrets
# NOTE: .gitallowed is used for exceptions
check_content:
    image: ${ARTIFACTORY_SERVER}/dockerhub-remote/f5devcentral/containthedocs:rpmbuild
    stage: test
    script:
        # install git-secrets
        - curl -q -L -o git_secrets.tar.gz ${GIT_SECRETS_PKG_URL}
        - tar xzf git_secrets.tar.gz
        - cd git-secrets-${GIT_SECRETS_VERSION} && make install && cd ..
        # now, add any patterns to disallow
        - git secrets --add '.*f5.*\.com'
        # scan
        - git secrets --scan
    tags:
        - cm-official-docker-executor
    except:
        refs:
            - schedules

# generate README.md and SCHEMA.md
check_schema:
    stage: test
    script:
        - npm install --unsafe-perm
        - npm run generate-readmes
        - if git diff | grep 'diff --git'; then exit 1; else exit 0; fi
    tags:
        - cm-official-docker-executor
    except:
        refs:
            - schedules
    allow_failure: true

# test extension metadata file is current
# with latest versions 
# from Github
test_extension_metadata:
    stage: test
    image: ${ARTIFACTORY_SERVER}/dockerhub-remote/python:3.7
    script:
        # generate metadata file
        - make generate_extension_metadata
        # check if file is out of date
        - changed_files_count=$(git diff --name-only | wc -l)
        - echo ${changed_files_count}
        - if [[ $changed_files_count -ne 0 ]]; then echo "Extension metadata is out of date, please update manually or check for latest in develop"; exit 1; else echo "Metadata file is unchanged"; fi
    tags:
        - cm-official-docker-executor
    except:
        refs:
            - schedules
    allow_failure: true

# verifies all examples 
# use the latest AT components versions 
# from src/lib/bigip/toolchain/toolchain_metadata.json
test_at_components_sync:
    stage: test
    image: ${ARTIFACTORY_SERVER}/dockerhub-remote/python:3.7
    script:
        - curl -sL https://deb.nodesource.com/setup_12.x | bash - && apt-get install -y nodejs build-essential
        - apt-get install -y jq
        - pip3 install yq
        - ./scripts/sync_at_components_metadata.sh
        - if git diff | grep 'diff --git'; then exit 1; else exit 0; fi
    tags:
        - cm-official-docker-executor
    except:
        refs:
            - schedules
    allow_failure: true

# checks links in README
check_links:
    stage: test
    script:
        - validate make link_check
    tags:
        - cm-official-docker-executor
    except:
        refs:
            - schedules

# generate extension metadata from latest Github releases
# commit the result if modified and
# create an artifact for publishing to CDN later
build_extension_metadata:
    stage: build
    image: ${ARTIFACTORY_SERVER}/dockerhub-remote/python:3.7
    before_script:
        # configuring SSH
        - eval $(ssh-agent -s)
        - test "$GIT_SSH_USER_PRIVATE_KEY" && (echo "$GIT_SSH_USER_PRIVATE_KEY" | tr -d '\r' | ssh-add -)
        - mkdir -p ~/.ssh
        - chmod 700 ~/.ssh
        - echo "$GIT_SSH_USER_PUBLIC_KEY" >> ~/.ssh/id_rsa.pub
        - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    script:
        # generate metadata file
        - make generate_extension_metadata
        # check if file is out of date
        - changed_files_count=$(git diff --name-only | wc -l)
        - echo ${changed_files_count}
        - if [[ $changed_files_count -ne 0 ]]; then echo "Extension metadata is out of date, we will update"; else echo "Metadata file is unchanged"; fi
        # configure Git
        - git config user.name $GITLAB_USER_LOGIN
        - git config user.email $GITLAB_USER_EMAIL
        # push metadata file to Gitlab if changed
        - git status
        - git add -f scripts/metadata/${EXTENSION_METADATA_FILE}
        - git add -f src/lib/bigip/toolchain/toolchain_metadata.json
        - git commit -m "Scheduled job committed metadata files to $CI_COMMIT_REF_NAME branch" || echo "No changes, nothing to commit!"
        - git remote rm origin && git remote add origin ${GIT_USER}:$CI_PROJECT_PATH.git
        - echo "Created new origin remote at ${GIT_USER}:$CI_PROJECT_PATH.git"
        - git push origin HEAD:$CI_COMMIT_REF_NAME
    tags:
        - cm-official-docker-executor
    only:
        variables:
            - $PUBLISH_EXTENSION_METADATA == "true"
    artifacts:
        name: ${CI_COMMIT_REF_NAME}_extension_metadata
        paths:
            - ${EXTENSION_METADATA_FILE}
        expire_in: 1 month

# build package
build_package:
    stage: build
    image: ${ARTIFACTORY_SERVER}/dockerhub-remote/node:8
    script:
        # install packages: jq, rpm
        - echo "deb http://archive.debian.org/debian stretch main" > /etc/apt/sources.list
        - apt-get update
        - apt-get install -y jq
        - apt-get install -y rpm
        # install node dependencies
        - npm install --unsafe-perm
        - if [ -n "$TEST_SUITE" ]; then export CLOUDS="-- --c $TEST_SUITE"; else export CLOUDS=""; fi
        # build package artifact
        - npm run build ${CLOUDS}
    tags:
        - cm-official-docker-executor
    artifacts:
        name: package
        paths:
            - node_modules
            - dist
        expire_in: 1 week
    except:
        variables:
            - $CLEANUP_DEVELOP_CDN == "true"
            - $PUBLISH_EXTENSION_METADATA == "true"

### Functional Tests Section
# Functional Tests - Initialization phase
.test_functional_init_generic: &test_functional_init_generic
    stage: functional_test_init
    image: ${DEPLOYMENT_TOOL_IMAGE_V2}
    retry:
        max: 1
    before_script:
        - mkdir ~/.docker
        - echo "${DOCKER_AUTH_CONFIG}" > ~/.docker/config.json
    script:
        - SOURCE_IP=$(curl ifconfig.me) && echo "Source IP of job is $SOURCE_IP"
        # deploy environment - required artifacts will be placed in ./deployment folder
        - echo "Deployment parameters are ${DEPLOYMENT_PARAMS}"
        - cd /deployment-tool && ./deployment_tool.sh --command info --plan runtime_init_${CLOUD} --name ci-$CI_JOB_ID --parameters "${DEPLOYMENT_PARAMS}" && cd -
        - cd /deployment-tool && ./deployment_tool.sh --command create --plan runtime_init_${CLOUD} --name ci-$CI_JOB_ID --database export --parameters "${DEPLOYMENT_PARAMS}" && cd -
        - cp -a /deployment-tool/deployment .
        - echo "ci-$CI_JOB_ID" > deployment_name
        # save runtime config for use in test execute stage
        - grep "\-\-\-" /deployment-tool/plans/runtime_init_${CLOUD}/templates/user_data.tpl -A 1000 > f5-bigip-runtime-declaration.yaml
        # sleeping a while here to give the vault server time to finish onboarding
        - sleep 2m
    tags:
        - azure-autoscale-runner
    only:
        variables:
            - $CI_COMMIT_REF_NAME == "main"
            - $CI_COMMIT_REF_NAME == "develop"
            - $RUN_FUNCTIONAL_TESTS == "true"
            - $CI_COMMIT_MESSAGE =~ /smart:run_functional_tests/
    except:
        variables:
            - $CLEANUP_DEVELOP_CDN == "true"
            - $PUBLISH_RPM == "true"
            - $PUBLISH_EXTENSION_METADATA == "true"
    artifacts:
        paths:
            - ./deployment
            - deployment_name
            - f5-bigip-runtime-declaration.yaml
        when: always
        expire_in: 1 week

# run functional tests: azure and BIGIPv16
test_functional_init_azure_v16:
    <<: *test_functional_init_generic
    services:
      - alias: mongo
        name: ${MONGODB_IMAGE}
    only:
        variables:
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "16"
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "all"
            - $TEST_SUITE == "azure" && $BIGIP_VERSION == "16"
    variables:
        CLOUD: "azure"
        DOMAIN: ${CLOUD}
        DEPLOYMENT_PARAMS: "location=${AZURE_LOCATION} bigip_version=${AZURE_BIGIP_VERSION_v16} object_id=${AZURE_COMMERCIAL_OBJECT_ID} tenant_id=${ARM_TENANT_ID}"
        MONGO_INITDB_ROOT_PASSWORD: "root"
        MONGO_INITDB_ROOT_USERNAME: "root"
    except:
        variables:
            - $TEST_SUITE == "gcp"
            - $TEST_SUITE == "aws"
            - $TEST_SUITE == "azure_gov"
            - $TEST_SUITE == "base"

# run functional tests: azure and BIGIPv15
test_functional_init_azure_v15:
    <<: *test_functional_init_generic
    services:
      - alias: mongo
        name: ${MONGODB_IMAGE}
    only:
        variables:
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "15"
            - $TEST_SUITE == "azure" && $BIGIP_VERSION == "15"
    variables:
        CLOUD: "azure"
        DOMAIN: ${CLOUD}
        DEPLOYMENT_PARAMS: "location=${AZURE_LOCATION} bigip_version=${AZURE_BIGIP_VERSION_v15} object_id=${AZURE_COMMERCIAL_OBJECT_ID} tenant_id=${ARM_TENANT_ID}"
        MONGO_INITDB_ROOT_PASSWORD: "root"
        MONGO_INITDB_ROOT_USERNAME: "root"
    except:
        variables:
            - $TEST_SUITE == "gcp"
            - $TEST_SUITE == "aws"
            - $TEST_SUITE == "azure_gov"
            - $TEST_SUITE == "base"

# run functional tests: azure and BIGIPv14
test_functional_init_azure_v14:
    <<: *test_functional_init_generic
    services:
      - alias: mongo
        name: ${MONGODB_IMAGE}
    only:
        variables:
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "14"
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "all"
            - $TEST_SUITE == "azure" && $BIGIP_VERSION == "14"
    variables:
        CLOUD: "azure"
        DOMAIN: ${CLOUD}
        DEPLOYMENT_PARAMS: "location=${AZURE_LOCATION} bigip_version=${AZURE_BIGIP_VERSION_v14} object_id=${AZURE_COMMERCIAL_OBJECT_ID} tenant_id=${ARM_TENANT_ID}"
        MONGO_INITDB_ROOT_PASSWORD: "root"
        MONGO_INITDB_ROOT_USERNAME: "root"
    except:
        variables:
            - $TEST_SUITE == "gcp"
            - $TEST_SUITE == "aws"
            - $TEST_SUITE == "azure_gov"
            - $TEST_SUITE == "base"

# run functional tests: azure and BIGIPv16
test_functional_init_azure_gov_v16:
    <<: *test_functional_init_generic
    services:
      - alias: mongo
        name: ${MONGODB_IMAGE}
    only:
        variables:
            - $TEST_SUITE == "azure_gov" && $BIGIP_VERSION == "16"
    variables:
        CLOUD: "azure"
        DOMAIN: "usgovcloudapi"
        ARM_CLIENT_ID: "$ARM_CLIENT_ID_GOV"
        ARM_CLIENT_SECRET: "$ARM_CLIENT_SECRET_GOV"
        ARM_SUBSCRIPTION_ID: "$ARM_SUBSCRIPTION_ID_GOV"
        ARM_TENANT_ID: "$ARM_TENANT_ID_GOV"
        DEPLOYMENT_PARAMS: "location=usgovvirginia bigip_version=${AZURE_BIGIP_VERSION_v16} object_id=${AZURE_GOV_OBJECT_ID} tenant_id=${ARM_TENANT_ID_GOV} environment=usgovernment domain=${DOMAIN}"
        MONGO_INITDB_ROOT_PASSWORD: "root"
        MONGO_INITDB_ROOT_USERNAME: "root"
    except:
        variables:
            - $TEST_SUITE == "gcp"
            - $TEST_SUITE == "aws"
            - $TEST_SUITE == "azure"
            - $TEST_SUITE == "base"

# run functional tests: azure and BIGIPv15
test_functional_init_azure_gov_v15:
    <<: *test_functional_init_generic
    services:
      - alias: mongo
        name: ${MONGODB_IMAGE}
    only:
        variables:
            - $TEST_SUITE == "azure_gov" && $BIGIP_VERSION == "15"
    variables:
        CLOUD: "azure"
        DOMAIN: "usgovcloudapi"
        ARM_CLIENT_ID: "$ARM_CLIENT_ID_GOV"
        ARM_CLIENT_SECRET: "$ARM_CLIENT_SECRET_GOV"
        ARM_SUBSCRIPTION_ID: "$ARM_SUBSCRIPTION_ID_GOV"
        ARM_TENANT_ID: "$ARM_TENANT_ID_GOV"
        DEPLOYMENT_PARAMS: "location=usgovvirginia bigip_version=${AZURE_BIGIP_VERSION_v15} object_id=${AZURE_GOV_OBJECT_ID} tenant_id=${ARM_TENANT_ID_GOV} environment=usgovernment domain=${DOMAIN}"
        MONGO_INITDB_ROOT_PASSWORD: "root"
        MONGO_INITDB_ROOT_USERNAME: "root"
    except:
        variables:
            - $TEST_SUITE == "gcp"
            - $TEST_SUITE == "aws"
            - $TEST_SUITE == "azure"
            - $TEST_SUITE == "base"

# run functional tests: azure and BIGIPv14
test_functional_init_azure_gov_v14:
    <<: *test_functional_init_generic
    services:
      - alias: mongo
        name: ${MONGODB_IMAGE}
    only:
        variables:
            - $TEST_SUITE == "azure_gov" && $BIGIP_VERSION == "14"
    variables:
        CLOUD: "azure"
        DOMAIN: "usgovcloudapi"
        ARM_CLIENT_ID: "$ARM_CLIENT_ID_GOV"
        ARM_CLIENT_SECRET: "$ARM_CLIENT_SECRET_GOV"
        ARM_SUBSCRIPTION_ID: "$ARM_SUBSCRIPTION_ID_GOV"
        ARM_TENANT_ID: "$ARM_TENANT_ID_GOV"
        DEPLOYMENT_PARAMS: "location=usgovvirginia bigip_version=${AZURE_BIGIP_VERSION_v14} object_id=${AZURE_GOV_OBJECT_ID} tenant_id=${ARM_TENANT_ID_GOV} environment=usgovernment domain=${DOMAIN}"
        MONGO_INITDB_ROOT_PASSWORD: "root"
        MONGO_INITDB_ROOT_USERNAME: "root"
    except:
        variables:
            - $TEST_SUITE == "gcp"
            - $TEST_SUITE == "aws"
            - $TEST_SUITE == "azure"
            - $TEST_SUITE == "base"

# run functional tests: aws and BIGIPv16
test_functional_init_aws_v16:
    <<: *test_functional_init_generic
    services:
      - alias: mongo
        name: ${MONGODB_IMAGE}
    only:
        variables:
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "16"
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "all"
            - $TEST_SUITE == "aws" && $BIGIP_VERSION == "16"
    variables:
        CLOUD: "aws"
        DEPLOYMENT_PARAMS: "aws_bigip_ami_id=${AWS_BIGIP_AMI_ID_v16} region=${AWS_DEFAULT_REGION}"
        MONGO_INITDB_ROOT_PASSWORD: "root"
        MONGO_INITDB_ROOT_USERNAME: "root"
    except:
        variables:
            - $TEST_SUITE == "azure"
            - $TEST_SUITE == "gcp"
            - $TEST_SUITE == "azure_gov"
            - $TEST_SUITE == "base"

# run functional tests: aws and BIGIPv15
test_functional_init_aws_v15:
    <<: *test_functional_init_generic
    services:
      - alias: mongo
        name: ${MONGODB_IMAGE}
    only:
        variables:
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "15"
            - $TEST_SUITE == "aws" && $BIGIP_VERSION == "15"
    variables:
        CLOUD: "aws"
        DEPLOYMENT_PARAMS: "aws_bigip_ami_id=${AWS_BIGIP_AMI_ID_v15} region=${AWS_DEFAULT_REGION}"
        MONGO_INITDB_ROOT_PASSWORD: "root"
        MONGO_INITDB_ROOT_USERNAME: "root"
    except:
        variables:
            - $TEST_SUITE == "azure"
            - $TEST_SUITE == "gcp"
            - $TEST_SUITE == "azure_gov"
            - $TEST_SUITE == "base"

# run functional tests: aws and BIGIPv14
test_functional_init_aws_v14:
    <<: *test_functional_init_generic
    services:
      - alias: mongo
        name: ${MONGODB_IMAGE}
    only:
        variables:
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "14"
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "all"
            - $TEST_SUITE == "aws" && $BIGIP_VERSION == "14"
    variables:
        CLOUD: "aws"
        DEPLOYMENT_PARAMS: "aws_bigip_ami_id=${AWS_BIGIP_AMI_ID_v14} region=${AWS_DEFAULT_REGION}"
        MONGO_INITDB_ROOT_PASSWORD: "root"
        MONGO_INITDB_ROOT_USERNAME: "root"
    except:
        variables:
            - $TEST_SUITE == "azure"
            - $TEST_SUITE == "gcp"
            - $TEST_SUITE == "azure_gov"
            - $TEST_SUITE == "base"

# run functional tests: gcp and BIGIPv16
test_functional_init_gcp_v16:
    <<: *test_functional_init_generic
    services:
      - alias: mongo
        name: ${MONGODB_IMAGE}
    only:
        variables:
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "16"
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "all"
            - $TEST_SUITE == "gcp" && $BIGIP_VERSION == "16"
    variables:
        CLOUD: "gcp"
        DEPLOYMENT_PARAMS: "bigip_version=${GOOGLE_BIGIP_VERSION_v16}"
        MONGO_INITDB_ROOT_PASSWORD: "root"
        MONGO_INITDB_ROOT_USERNAME: "root"
    except:
        variables:
            - $TEST_SUITE == "azure"
            - $TEST_SUITE == "aws"
            - $TEST_SUITE == "azure_gov"
            - $TEST_SUITE == "base"

# run functional tests: gcp and BIGIPv15
test_functional_init_gcp_v15:
    <<: *test_functional_init_generic
    services:
      - alias: mongo
        name: ${MONGODB_IMAGE}
    only:
        variables:
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "15"
            - $TEST_SUITE == "gcp" && $BIGIP_VERSION == "15"
    variables:
        CLOUD: "gcp"
        DEPLOYMENT_PARAMS: "bigip_version=${GOOGLE_BIGIP_VERSION_v15}"
        MONGO_INITDB_ROOT_PASSWORD: "root"
        MONGO_INITDB_ROOT_USERNAME: "root"
    except:
        variables:
            - $TEST_SUITE == "azure"
            - $TEST_SUITE == "aws"
            - $TEST_SUITE == "azure_gov"
            - $TEST_SUITE == "base"

# run functional tests: gcp and BIGIPv14
test_functional_init_gcp_v14:
    <<: *test_functional_init_generic
    services:
      - alias: mongo
        name: ${MONGODB_IMAGE}
    only:
        variables:
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "14"
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "all"
            - $TEST_SUITE == "gcp" && $BIGIP_VERSION == "14"
    variables:
        CLOUD: "gcp"
        DEPLOYMENT_PARAMS: "bigip_version=${GOOGLE_BIGIP_VERSION_v14}"
        MONGO_INITDB_ROOT_PASSWORD: "root"
        MONGO_INITDB_ROOT_USERNAME: "root"
    except:
        variables:
            - $TEST_SUITE == "azure"
            - $TEST_SUITE == "aws"
            - $TEST_SUITE == "azure_gov"
            - $TEST_SUITE == "base"

# run functional tests: base package and BIGIPv16
test_functional_init_base_v16:
    <<: *test_functional_init_generic
    services:
      - alias: mongo
        name: ${MONGODB_IMAGE}
    only:
        variables:
            - $TEST_SUITE == "base" && $BIGIP_VERSION == "16"
    variables:
        CLOUD: "base"
        TF_VAR_bigip_version: "$GOOGLE_BIGIP_VERSION_v16"
        MONGO_INITDB_ROOT_PASSWORD: "root"
        MONGO_INITDB_ROOT_USERNAME: "root"
    except:
        variables:
            - $TEST_SUITE == "azure"
            - $TEST_SUITE == "aws"
            - $TEST_SUITE == "azure_gov"
            - $TEST_SUITE == "gcp"

# run functional tests: base package and BIGIPv15
test_functional_init_base_v15:
    <<: *test_functional_init_generic
    services:
      - alias: mongo
        name: ${MONGODB_IMAGE}
    only:
        variables:
            - $TEST_SUITE == "base" && $BIGIP_VERSION == "15"
    variables:
        CLOUD: "base"
        TF_VAR_bigip_version: "$GOOGLE_BIGIP_VERSION_v15"
        MONGO_INITDB_ROOT_PASSWORD: "root"
        MONGO_INITDB_ROOT_USERNAME: "root"
    except:
        variables:
            - $TEST_SUITE == "azure"
            - $TEST_SUITE == "aws"
            - $TEST_SUITE == "azure_gov"
            - $TEST_SUITE == "gcp"

# run functional tests: base package and BIGIPv15
test_functional_init_base_v14:
    <<: *test_functional_init_generic
    services:
      - alias: mongo
        name: ${MONGODB_IMAGE}
    only:
        variables:
            - $TEST_SUITE == "base" && $BIGIP_VERSION == "14"
    variables:
        CLOUD: "base"
        TF_VAR_bigip_version: "$GOOGLE_BIGIP_VERSION_v14"
        MONGO_INITDB_ROOT_PASSWORD: "root"
        MONGO_INITDB_ROOT_USERNAME: "root"
    except:
        variables:
            - $TEST_SUITE == "azure"
            - $TEST_SUITE == "aws"
            - $TEST_SUITE == "azure_gov"
            - $TEST_SUITE == "gcp"

# Functional Tests - Execute phase (with no retries)
.test_functional_execute_generic: &test_functional_execute_generic
    stage: functional_test_execute
    script:
        - SOURCE_IP=$(curl ifconfig.me) && echo "Source IP of job is $SOURCE_IP"
        # install jq and sshpass
        - echo "deb http://archive.debian.org/debian stretch main" > /etc/apt/sources.list
        - apt-get update
        - apt-get install -y jq openssh-client sshpass
        # create ssh key
        - echo "*** Configuring SSH"
        - eval $(ssh-agent -s)
        - echo "$SSH_KEY" | sed 's/\\n/\n/g' | ssh-add -
        - mkdir -p ~/.ssh
        - chmod 700 ~/.ssh
        # gather package version and build
        - export VERSION=$(cat package.json | jq -r ".version")
        - export RELEASE=$(cat package.json | jq -r ".release")
        # copying artifacts inherited from functional_test_init target to root directory
        - cp -a ./deployment/. .
        - cp f5-bigip-runtime-declaration.yaml onboard_config
        # inhale the vault variables
        - export VAULT_MGMT_IP=$(cat deployment_info.json | jq .vault_server_public_ip -r) && echo "VAULT_MGMT_IP is ${VAULT_MGMT_IP}"
        - export VAULT_SERVER_PUBLIC_HTTP=$(cat deployment_info.json | jq .vault_server_public_http -r) && echo "VAULT_SERVER_PUBLIC_HTTP is ${VAULT_SERVER_PUBLIC_HTTP}"
        - export VAULT_APP_ROLE=$(ssh -l ubuntu ${VAULT_MGMT_IP} -o 'StrictHostKeyChecking=no' 'cat /tmp/role-id | jq -r .data.role_id') && echo "VAULT_APP_ROLE is ${VAULT_APP_ROLE}"
        - export VAULT_SECRET_ID=$(ssh -l ubuntu ${VAULT_MGMT_IP} -o 'StrictHostKeyChecking=no' 'cat /tmp/secret-id | jq -r .data.secret_id') && echo "VAULT_SECRET_ID is ${VAULT_SECRET_ID}"
        - export VAULT_WRAPPED_SECRET_ID=$(ssh -l ubuntu ${VAULT_MGMT_IP} -o 'StrictHostKeyChecking=no' "cat /tmp/wrapped-secret-id-${CLOUD}-${BIGIP_VERSION} | jq -r .wrap_info.token") && echo "VAULT_WRAPPED_SECRET_ID is ${VAULT_WRAPPED_SECRET_ID}"
        - export VAULT_WRAPPED_SECRET_ID_2=$(ssh -l ubuntu ${VAULT_MGMT_IP} -o 'StrictHostKeyChecking=no' "cat /tmp/wrapped-secret-id-2-${CLOUD}-${BIGIP_VERSION} | jq -r .wrap_info.token") && echo "VAULT_WRAPPED_SECRET_ID_2 is ${VAULT_WRAPPED_SECRET_ID_2}"
        # inhale deployment variables
        - export MGMT_IP=$(cat deployment_info.json | jq .instances[].mgmt_address -r) && echo "MGMT_IP is ${MGMT_IP}"
        - export USERNAME=$(cat deployment_info.json | jq .instances[].admin_username -r) && echo "USERNAME is ${USERNAME}"
        - export PASSWORD=$(cat deployment_info.json | jq .instances[].admin_password -r) && echo "PASSWORD is ${PASSWORD}"
        - export DEPLOYMENT_ID=$(cat deployment_info.json | jq .deploymentId -r) && echo "DEPLOYMENT_ID is ${DEPLOYMENT_ID}"
        - export SECRET_ID=$(cat deployment_info.json | jq .secret_id -r) && echo "SECRET_ID is ${SECRET_ID}"
        - echo "DOMAIN is ${DOMAIN}"
        # modify runtime init config
        # replace cloud plan defaults with vault variables
        - sed -i "s@vault_server_public_http@${VAULT_SERVER_PUBLIC_HTTP}@g" onboard_config
        - sed -i "s/vault_app_role/${VAULT_APP_ROLE}/g" onboard_config
        - sed -i "s/vault_secret_id/${VAULT_SECRET_ID}/g" onboard_config
        - sed -i "s/vault_wrapped_secret_id/${VAULT_WRAPPED_SECRET_ID}/g" onboard_config
        # update runtime config with deployment variables
        - sed "s/\${deployment_id}/${DEPLOYMENT_ID}/g" onboard_config > onboard_config_replaced01
        - sed "s/\${secret_id}/${SECRET_ID}/g" onboard_config_replaced01 > onboard_config_replaced02
        - sed "s/\${domain}/${DOMAIN}/g" onboard_config_replaced02 > onboard_config_replaced03
        - rm onboard_config && rm onboard_config_replaced01 && rm onboard_config_replaced02
        - mv onboard_config_replaced03 onboard_config
        - echo "Initial onboard config is" && cat onboard_config
        # updating config because wrapped vault token can only be used once
        - if [[ "${CLOUD}" != "base" ]]; then sed "s/${VAULT_WRAPPED_SECRET_ID}/${VAULT_WRAPPED_SECRET_ID_2}/g" onboard_config > onboard_config_update; else cp onboard_config onboard_config_update; fi
        - echo "Updated onboard config is" && cat onboard_config_update
        # upload config files and self installer
        - echo "Verifying that BIGIP is ready to accept commands"
        - bash tests/scripts/verify_bash_available.sh
        - if [[ $? != 0 ]]; then exit 1; fi
        - echo "Uploading runtime init config files"
        - sshpass -p $PASSWORD scp -v -o StrictHostKeyChecking=no onboard_config $USERNAME@$MGMT_IP:/config/cloud/onboard_config
        - sshpass -p $PASSWORD scp -v -o StrictHostKeyChecking=no onboard_config_update $USERNAME@$MGMT_IP:/config/cloud/onboard_config_update
        # install RPM and execute
        - echo "Installing RPM and executing"
        - pwd
        - ls -la
        - sshpass -p $PASSWORD scp -v -o StrictHostKeyChecking=no dist/f5-bigip-runtime-init-$VERSION-$RELEASE.gz.run $USERNAME@$MGMT_IP:/var/tmp/
        - sshpass -p $PASSWORD ssh -o StrictHostKeyChecking=no $USERNAME@$MGMT_IP "bash /var/tmp/f5-bigip-runtime-init-$VERSION-$RELEASE.gz.run -- '--cloud ${CLOUD} --toolchain-metadata-file-url https://f5-cft.s3.amazonaws.com/invalid.json --telemetry-params testKey01:testValue01,testKey02:testValue02'"
        - sshpass -p $PASSWORD ssh -o StrictHostKeyChecking=no $USERNAME@$MGMT_IP "bash -c 'export TEEM_API_ENVIRONMENT=staging && f5-bigip-runtime-init -c /config/cloud/onboard_config'"
        # re-run with updated config
        - sleep 30
        - sshpass -p $PASSWORD ssh -o StrictHostKeyChecking=no $USERNAME@$MGMT_IP "bash /var/tmp/f5-bigip-runtime-init-$VERSION-$RELEASE.gz.run -- '--cloud ${CLOUD} --skip-verify --skip-toolchain-metadata-sync'"
        - sshpass -p $PASSWORD ssh -o StrictHostKeyChecking=no $USERNAME@$MGMT_IP "bash f5-bigip-runtime-init -c /config/cloud/onboard_config_update --skip-telemetry"
        # install dependencies for functional tests
        - npm install --unsafe-perm
        # executing fuctional test
        - validate npm run functional-test
    tags:
        - docker-executor
    only:
        variables:
            - $CI_COMMIT_REF_NAME == "main"
            - $CI_COMMIT_REF_NAME == "develop"
            - $RUN_FUNCTIONAL_TESTS == "true"
            - $CI_COMMIT_MESSAGE =~ /smart:run_functional_tests/
    except:
        variables:
            - $CLEANUP_DEVELOP_CDN == "true"
            - $PUBLISH_RPM == "true"
            - $PUBLISH_EXTENSION_METADATA == "true"
    artifacts:
        paths:
            - logs
        when: always
        expire_in: 1 week

# run functional tests: azure
test_functional_execute_azure_v16:
    <<: *test_functional_execute_generic
    only:
        variables:
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "16"
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "all"
            - $TEST_SUITE == "azure" && $BIGIP_VERSION == "16"
    variables:
        CLOUD: "azure"
        DOMAIN: ${CLOUD}
    except:
        variables:
            - $TEST_SUITE == "gcp"
            - $TEST_SUITE == "aws"
            - $TEST_SUITE == "azure_gov"
            - $TEST_SUITE == "base"
    dependencies:
        - build_package
        - test_functional_init_azure_v16
    needs:
        - build_package
        - test_functional_init_azure_v16

# run functional tests: azure
test_functional_execute_azure_v15:
    <<: *test_functional_execute_generic
    only:
        variables:
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "15"
            - $TEST_SUITE == "azure" && $BIGIP_VERSION == "15"
    variables:
        CLOUD: "azure"
        DOMAIN: ${CLOUD}
    except:
        variables:
            - $TEST_SUITE == "gcp"
            - $TEST_SUITE == "aws"
            - $TEST_SUITE == "azure_gov"
            - $TEST_SUITE == "base"
    dependencies:
        - build_package
        - test_functional_init_azure_v15
    needs:
        - build_package
        - test_functional_init_azure_v15

# run functional tests: azure
test_functional_execute_azure_v14:
    <<: *test_functional_execute_generic
    only:
        variables:
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "14"
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "all"
            - $TEST_SUITE == "azure" && $BIGIP_VERSION == "14"
    variables:
        CLOUD: "azure"
        DOMAIN: ${CLOUD}
    except:
        variables:
            - $TEST_SUITE == "gcp"
            - $TEST_SUITE == "aws"
            - $TEST_SUITE == "azure_gov"
            - $TEST_SUITE == "base"
    dependencies:
        - build_package
        - test_functional_init_azure_v14
    needs:
        - build_package
        - test_functional_init_azure_v14

# run functional tests: azure goverment
test_functional_execute_azure_gov_v16:
    <<: *test_functional_execute_generic
    only:
        variables:
            - $TEST_SUITE == "azure_gov" && $BIGIP_VERSION == "16"
    variables:
        CLOUD: "azure"
        DOMAIN: "usgovcloudapi"
        ARM_CLIENT_ID: "$ARM_CLIENT_ID_GOV"
        ARM_CLIENT_SECRET: "$ARM_CLIENT_SECRET_GOV"
        ARM_SUBSCRIPTION_ID: "$ARM_SUBSCRIPTION_ID_GOV"
        ARM_TENANT_ID: "$ARM_TENANT_ID_GOV"
    except:
        variables:
            - $TEST_SUITE == "gcp"
            - $TEST_SUITE == "aws"
            - $TEST_SUITE == "azure"
            - $TEST_SUITE == "base"
    dependencies:
        - build_package
        - test_functional_init_azure_gov_v16
    needs:
        - build_package
        - test_functional_init_azure_gov_v16

# run functional tests: azure goverment
test_functional_execute_azure_gov_v15:
    <<: *test_functional_execute_generic
    only:
        variables:
            - $TEST_SUITE == "azure_gov" && $BIGIP_VERSION == "15"
    variables:
        CLOUD: "azure"
        DOMAIN: "usgovcloudapi"
        ARM_CLIENT_ID: "$ARM_CLIENT_ID_GOV"
        ARM_CLIENT_SECRET: "$ARM_CLIENT_SECRET_GOV"
        ARM_SUBSCRIPTION_ID: "$ARM_SUBSCRIPTION_ID_GOV"
        ARM_TENANT_ID: "$ARM_TENANT_ID_GOV"
    except:
        variables:
            - $TEST_SUITE == "gcp"
            - $TEST_SUITE == "aws"
            - $TEST_SUITE == "azure"
            - $TEST_SUITE == "base"
    dependencies:
        - build_package
        - test_functional_init_azure_gov_v15
    needs:
        - build_package
        - test_functional_init_azure_gov_v15

# run functional tests: azure
test_functional_execute_azure_gov_v14:
    <<: *test_functional_execute_generic
    only:
        variables:
            - $TEST_SUITE == "azure_gov" && $BIGIP_VERSION == "14"
    variables:
        CLOUD: "azure"
        DOMAIN: "usgovcloudapi"
        ARM_CLIENT_ID: "$ARM_CLIENT_ID_GOV"
        ARM_CLIENT_SECRET: "$ARM_CLIENT_SECRET_GOV"
        ARM_SUBSCRIPTION_ID: "$ARM_SUBSCRIPTION_ID_GOV"
        ARM_TENANT_ID: "$ARM_TENANT_ID_GOV"
    except:
        variables:
            - $TEST_SUITE == "gcp"
            - $TEST_SUITE == "aws"
            - $TEST_SUITE == "azure"
            - $TEST_SUITE == "base"
    dependencies:
        - build_package
        - test_functional_init_azure_gov_v14
    needs:
        - build_package
        - test_functional_init_azure_gov_v14

# run functional tests: aws
test_functional_execute_aws_v16:
    <<: *test_functional_execute_generic
    only:
        variables:
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "16"
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "all"
            - $TEST_SUITE == "aws" && $BIGIP_VERSION == "16"
    variables:
        CLOUD: "aws"
    except:
        variables:
            - $TEST_SUITE == "gcp"
            - $TEST_SUITE == "azure"
            - $TEST_SUITE == "azure_gov"
            - $TEST_SUITE == "base"
    dependencies:
        - build_package
        - test_functional_init_aws_v16
    needs:
        - build_package
        - test_functional_init_aws_v16

# run functional tests: aws
test_functional_execute_aws_v15:
    <<: *test_functional_execute_generic
    only:
        variables:
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "15"
            - $TEST_SUITE == "aws" && $BIGIP_VERSION == "15"
    variables:
        CLOUD: "aws"
    except:
        variables:
            - $TEST_SUITE == "gcp"
            - $TEST_SUITE == "azure"
            - $TEST_SUITE == "azure_gov"
            - $TEST_SUITE == "base"
    dependencies:
        - build_package
        - test_functional_init_aws_v15
    needs:
        - build_package
        - test_functional_init_aws_v15

test_functional_execute_aws_v14:
    <<: *test_functional_execute_generic
    only:
        variables:
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "14"
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "all"
            - $TEST_SUITE == "aws" && $BIGIP_VERSION == "14"
    variables:
        CLOUD: "aws"
    except:
        variables:
            - $TEST_SUITE == "gcp"
            - $TEST_SUITE == "azure"
            - $TEST_SUITE == "azure_gov"
            - $TEST_SUITE == "base"
    dependencies:
        - build_package
        - test_functional_init_aws_v14
    needs:
        - build_package
        - test_functional_init_aws_v14

# run functional tests: gcp
test_functional_execute_gcp_v16:
    <<: *test_functional_execute_generic
    only:
        variables:
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "16"
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "all"
            - $TEST_SUITE == "gcp" && $BIGIP_VERSION == "16"
    variables:
        CLOUD: "gcp"
    except:
        variables:
            - $TEST_SUITE == "aws"
            - $TEST_SUITE == "azure"
            - $TEST_SUITE == "azure_gov"
            - $TEST_SUITE == "base"
    dependencies:
        - build_package
        - test_functional_init_gcp_v16
    needs:
        - build_package
        - test_functional_init_gcp_v16

test_functional_execute_gcp_v15:
    <<: *test_functional_execute_generic
    only:
        variables:
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "15"
            - $TEST_SUITE == "gcp" && $BIGIP_VERSION == "15"
    variables:
        CLOUD: "gcp"
    except:
        variables:
            - $TEST_SUITE == "aws"
            - $TEST_SUITE == "azure"
            - $TEST_SUITE == "azure_gov"
            - $TEST_SUITE == "base"
    dependencies:
        - build_package
        - test_functional_init_gcp_v15
    needs:
        - build_package
        - test_functional_init_gcp_v15

test_functional_execute_gcp_v14:
    <<: *test_functional_execute_generic
    only:
        variables:
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "14"
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "all"
            - $TEST_SUITE == "gcp" && $BIGIP_VERSION == "14"
    variables:
        CLOUD: "gcp"
    except:
        variables:
            - $TEST_SUITE == "aws"
            - $TEST_SUITE == "azure"
            - $TEST_SUITE == "azure_gov"
            - $TEST_SUITE == "base"
    dependencies:
        - build_package
        - test_functional_init_gcp_v14
    needs:
        - build_package
        - test_functional_init_gcp_v14

# run base package tests
test_functional_execute_base_v16:
    <<: *test_functional_execute_generic
    only:
        variables:
            - $TEST_SUITE == "base" && $BIGIP_VERSION == "16"
    variables:
        CLOUD: "base"
        ENV_PROVIDER_TESTS: "ignore"
    except:
        variables:
            - $TEST_SUITE == "aws"
            - $TEST_SUITE == "azure"
            - $TEST_SUITE == "azure_gov"
            - $TEST_SUITE == "gcp"
    dependencies:
        - build_package
        - test_functional_init_base_v16
    needs:
        - build_package
        - test_functional_init_base_v16

test_functional_execute_base_v15:
    <<: *test_functional_execute_generic
    only:
        variables:
            - $TEST_SUITE == "base" && $BIGIP_VERSION == "15"
    variables:
        CLOUD: "base"
        ENV_PROVIDER_TESTS: "ignore"
    except:
        variables:
            - $TEST_SUITE == "aws"
            - $TEST_SUITE == "azure"
            - $TEST_SUITE == "azure_gov"
            - $TEST_SUITE == "gcp"
    dependencies:
        - build_package
        - test_functional_init_base_v15
    needs:
        - build_package
        - test_functional_init_base_v15

test_functional_execute_base_v14:
    <<: *test_functional_execute_generic
    only:
        variables:
            - $TEST_SUITE == "base" && $BIGIP_VERSION == "14"
    variables:
        CLOUD: "base"
        ENV_PROVIDER_TESTS: "ignore"
    except:
        variables:
            - $TEST_SUITE == "aws"
            - $TEST_SUITE == "azure"
            - $TEST_SUITE == "azure_gov"
            - $TEST_SUITE == "gcp"
    dependencies:
        - build_package
        - test_functional_init_base_v14
    needs:
        - build_package
        - test_functional_init_base_v14

# Functional Tests - Cleanup phase (executes always with 1 retry in a case of any failures)
.test_functional_cleanup_generic: &test_functional_cleanup_generic
    stage: functional_test_cleanup
    image: ${DEPLOYMENT_TOOL_IMAGE_V2}
    retry:
        max: 1
    when: always
    before_script:
        - mkdir ~/.docker
        - echo "${DOCKER_AUTH_CONFIG}" > ~/.docker/config.json
    script:
        - DEPLOYMENT_NAME=$(cat deployment_name)
        - mkdir -p /deployment-tool/deployment && cp -a ./deployment/. /deployment-tool/deployment
        - cd /deployment-tool && ./deployment_tool.sh --command delete --plan runtime_init_${CLOUD} --name ${DEPLOYMENT_NAME} --database import
    tags:
        - azure-autoscale-runner
    only:
        variables:
            - $CI_COMMIT_REF_NAME == "main"
            - $CI_COMMIT_REF_NAME == "develop"
            - $RUN_FUNCTIONAL_TESTS == "true"
            - $CI_COMMIT_MESSAGE =~ /smart:run_functional_tests/
    except:
        variables:
            - $CLEANUP_DEVELOP_CDN == "true"
            - $PUBLISH_RPM == "true"
            - $PUBLISH_EXTENSION_METADATA == "true"
    allow_failure: true

# run functional tests: azure
test_functional_cleanup_azure_v16:
    <<: *test_functional_cleanup_generic
    services:
      - alias: mongo
        name: ${MONGODB_IMAGE}
    only:
        variables:
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "16"
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "all"
            - $TEST_SUITE == "azure" && $BIGIP_VERSION == "16"
    variables:
        CLOUD: "azure"
        MONGO_INITDB_ROOT_PASSWORD: "root"
        MONGO_INITDB_ROOT_USERNAME: "root"
    except:
        variables:
            - $TEST_SUITE == "aws"
            - $TEST_SUITE == "gcp"
            - $TEST_SUITE == "azure_gov"
            - $TEST_SUITE == "base"
    dependencies:
        - test_functional_init_azure_v16
        - test_functional_execute_azure_v16
    needs:
        - test_functional_init_azure_v16
        - test_functional_execute_azure_v16

test_functional_cleanup_azure_v15:
    <<: *test_functional_cleanup_generic
    services:
      - alias: mongo
        name: ${MONGODB_IMAGE}
    only:
        variables:
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "15"
            - $TEST_SUITE == "azure" && $BIGIP_VERSION == "15"
    variables:
        CLOUD: "azure"
        MONGO_INITDB_ROOT_PASSWORD: "root"
        MONGO_INITDB_ROOT_USERNAME: "root"
    except:
        variables:
            - $TEST_SUITE == "aws"
            - $TEST_SUITE == "gcp"
            - $TEST_SUITE == "azure_gov"
            - $TEST_SUITE == "base"
    dependencies:
        - test_functional_init_azure_v15
        - test_functional_execute_azure_v15
    needs:
        - test_functional_init_azure_v15
        - test_functional_execute_azure_v15

test_functional_cleanup_azure_v14:
    <<: *test_functional_cleanup_generic
    services:
      - alias: mongo
        name: ${MONGODB_IMAGE}
    only:
        variables:
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "14"
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "all"
            - $TEST_SUITE == "azure" && $BIGIP_VERSION == "14"
    variables:
        CLOUD: "azure"
        MONGO_INITDB_ROOT_PASSWORD: "root"
        MONGO_INITDB_ROOT_USERNAME: "root"
    except:
        variables:
            - $TEST_SUITE == "aws"
            - $TEST_SUITE == "gcp"
            - $TEST_SUITE == "azure_gov"
            - $TEST_SUITE == "base"
    dependencies:
        - test_functional_init_azure_v14
        - test_functional_execute_azure_v14
    needs:
        - test_functional_init_azure_v14
        - test_functional_execute_azure_v14

# run functional tests: azure gov
test_functional_cleanup_azure_gov_v16:
    <<: *test_functional_cleanup_generic
    services:
      - alias: mongo
        name: ${MONGODB_IMAGE}
    only:
        variables:
            - $TEST_SUITE == "azure_gov" && $BIGIP_VERSION == "16"
    variables:
        CLOUD: "azure"
        ARM_CLIENT_ID: "$ARM_CLIENT_ID_GOV"
        ARM_CLIENT_SECRET: "$ARM_CLIENT_SECRET_GOV"
        ARM_SUBSCRIPTION_ID: "$ARM_SUBSCRIPTION_ID_GOV"
        ARM_TENANT_ID: "$ARM_TENANT_ID_GOV"
        MONGO_INITDB_ROOT_PASSWORD: "root"
        MONGO_INITDB_ROOT_USERNAME: "root"
    except:
        variables:
            - $TEST_SUITE == "aws"
            - $TEST_SUITE == "gcp"
            - $TEST_SUITE == "azure"
            - $TEST_SUITE == "base"
    dependencies:
        - test_functional_init_azure_gov_v16
        - test_functional_execute_azure_gov_v16
    needs:
        - test_functional_init_azure_gov_v16
        - test_functional_execute_azure_gov_v16

test_functional_cleanup_azure_gov_v15:
    <<: *test_functional_cleanup_generic
    services:
      - alias: mongo
        name: ${MONGODB_IMAGE}
    only:
        variables:
            - $TEST_SUITE == "azure_gov" && $BIGIP_VERSION == "15"
    variables:
        CLOUD: "azure"
        ARM_CLIENT_ID: "$ARM_CLIENT_ID_GOV"
        ARM_CLIENT_SECRET: "$ARM_CLIENT_SECRET_GOV"
        ARM_SUBSCRIPTION_ID: "$ARM_SUBSCRIPTION_ID_GOV"
        ARM_TENANT_ID: "$ARM_TENANT_ID_GOV"
        MONGO_INITDB_ROOT_PASSWORD: "root"
        MONGO_INITDB_ROOT_USERNAME: "root"
    except:
        variables:
            - $TEST_SUITE == "aws"
            - $TEST_SUITE == "gcp"
            - $TEST_SUITE == "azure"
            - $TEST_SUITE == "base"
    dependencies:
        - test_functional_init_azure_gov_v15
        - test_functional_execute_azure_gov_v15
    needs:
        - test_functional_init_azure_gov_v15
        - test_functional_execute_azure_gov_v15

test_functional_cleanup_azure_gov_v14:
    <<: *test_functional_cleanup_generic
    services:
      - alias: mongo
        name: ${MONGODB_IMAGE}
    only:
        variables:
            - $TEST_SUITE == "azure_gov" && $BIGIP_VERSION == "14"
    variables:
        CLOUD: "azure"
        ARM_CLIENT_ID: "$ARM_CLIENT_ID_GOV"
        ARM_CLIENT_SECRET: "$ARM_CLIENT_SECRET_GOV"
        ARM_SUBSCRIPTION_ID: "$ARM_SUBSCRIPTION_ID_GOV"
        ARM_TENANT_ID: "$ARM_TENANT_ID_GOV"
        MONGO_INITDB_ROOT_PASSWORD: "root"
        MONGO_INITDB_ROOT_USERNAME: "root"
    except:
        variables:
            - $TEST_SUITE == "aws"
            - $TEST_SUITE == "gcp"
            - $TEST_SUITE == "azure"
            - $TEST_SUITE == "base"
    dependencies:
        - test_functional_init_azure_gov_v14
        - test_functional_execute_azure_gov_v14
    needs:
        - test_functional_init_azure_gov_v14
        - test_functional_execute_azure_gov_v14

# run functional tests: aws
test_functional_cleanup_aws_v16:
    <<: *test_functional_cleanup_generic
    services:
      - alias: mongo
        name: ${MONGODB_IMAGE}
    only:
        variables:
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "16"
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "all"
            - $TEST_SUITE == "aws" && $BIGIP_VERSION == "16"
    variables:
        CLOUD: "aws"
        MONGO_INITDB_ROOT_PASSWORD: "root"
        MONGO_INITDB_ROOT_USERNAME: "root"
    except:
        variables:
            - $TEST_SUITE == "azure"
            - $TEST_SUITE == "gcp"
            - $TEST_SUITE == "azure_gov"
            - $TEST_SUITE == "base"
    dependencies:
        - test_functional_init_aws_v16
        - test_functional_execute_aws_v16
    needs:
        - test_functional_init_aws_v16
        - test_functional_execute_aws_v16

test_functional_cleanup_aws_v15:
    <<: *test_functional_cleanup_generic
    services:
      - alias: mongo
        name: ${MONGODB_IMAGE}
    only:
        variables:
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "15"
            - $TEST_SUITE == "aws" && $BIGIP_VERSION == "15"
    variables:
        CLOUD: "aws"
        MONGO_INITDB_ROOT_PASSWORD: "root"
        MONGO_INITDB_ROOT_USERNAME: "root"
    except:
        variables:
            - $TEST_SUITE == "azure"
            - $TEST_SUITE == "gcp"
            - $TEST_SUITE == "azure_gov"
            - $TEST_SUITE == "base"
    dependencies:
        - test_functional_init_aws_v15
        - test_functional_execute_aws_v15
    needs:
        - test_functional_init_aws_v15
        - test_functional_execute_aws_v15

test_functional_cleanup_aws_v14:
    <<: *test_functional_cleanup_generic
    services:
      - alias: mongo
        name: ${MONGODB_IMAGE}
    only:
        variables:
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "14"
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "all"
            - $TEST_SUITE == "aws" && $BIGIP_VERSION == "14"
    variables:
        CLOUD: "aws"
        MONGO_INITDB_ROOT_PASSWORD: "root"
        MONGO_INITDB_ROOT_USERNAME: "root"
    except:
        variables:
            - $TEST_SUITE == "azure"
            - $TEST_SUITE == "gcp"
            - $TEST_SUITE == "azure_gov"
            - $TEST_SUITE == "base"
    dependencies:
        - test_functional_init_aws_v14
        - test_functional_execute_aws_v14
    needs:
        - test_functional_init_aws_v14
        - test_functional_execute_aws_v14

# run functional tests: gcp
test_functional_cleanup_gcp_v16:
    <<: *test_functional_cleanup_generic
    services:
      - alias: mongo
        name: ${MONGODB_IMAGE}
    only:
        variables:
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "16"
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "all"
            - $TEST_SUITE == "gcp" && $BIGIP_VERSION == "16"
    variables:
        CLOUD: "gcp"
        MONGO_INITDB_ROOT_PASSWORD: "root"
        MONGO_INITDB_ROOT_USERNAME: "root"
    except:
        variables:
            - $TEST_SUITE == "azure"
            - $TEST_SUITE == "aws"
            - $TEST_SUITE == "azure_gov"
            - $TEST_SUITE == "base"
    dependencies:
        - test_functional_init_gcp_v16
        - test_functional_execute_gcp_v16
    needs:
        - test_functional_init_gcp_v16
        - test_functional_execute_gcp_v16

test_functional_cleanup_gcp_v15:
    <<: *test_functional_cleanup_generic
    services:
      - alias: mongo
        name: ${MONGODB_IMAGE}
    only:
        variables:
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "15"
            - $TEST_SUITE == "gcp" && $BIGIP_VERSION == "15"
    variables:
        CLOUD: "gcp"
        MONGO_INITDB_ROOT_PASSWORD: "root"
        MONGO_INITDB_ROOT_USERNAME: "root"
    except:
        variables:
            - $TEST_SUITE == "azure"
            - $TEST_SUITE == "aws"
            - $TEST_SUITE == "azure_gov"
            - $TEST_SUITE == "base"
    dependencies:
        - test_functional_init_gcp_v15
        - test_functional_execute_gcp_v15
    needs:
        - test_functional_init_gcp_v15
        - test_functional_execute_gcp_v15

test_functional_cleanup_gcp_v14:
    <<: *test_functional_cleanup_generic
    services:
      - alias: mongo
        name: ${MONGODB_IMAGE}
    only:
        variables:
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "14"
            - $TEST_SUITE == "all" && $BIGIP_VERSION == "all"
            - $TEST_SUITE == "gcp" && $BIGIP_VERSION == "14"
    variables:
        CLOUD: "gcp"
        MONGO_INITDB_ROOT_PASSWORD: "root"
        MONGO_INITDB_ROOT_USERNAME: "root"
    except:
        variables:
            - $TEST_SUITE == "azure"
            - $TEST_SUITE == "aws"
            - $TEST_SUITE == "azure_gov"
            - $TEST_SUITE == "base"
    dependencies:
        - test_functional_init_gcp_v14
        - test_functional_execute_gcp_v14
    needs:
        - test_functional_init_gcp_v14
        - test_functional_execute_gcp_v14

# run functional tests: base
test_functional_cleanup_base_v16:
    <<: *test_functional_cleanup_generic
    services:
      - alias: mongo
        name: ${MONGODB_IMAGE}
    only:
        variables:
            - $TEST_SUITE == "base" && $BIGIP_VERSION == "16"
    variables:
        CLOUD: "base"
        MONGO_INITDB_ROOT_PASSWORD: "root"
        MONGO_INITDB_ROOT_USERNAME: "root"
    except:
        variables:
            - $TEST_SUITE == "azure"
            - $TEST_SUITE == "aws"
            - $TEST_SUITE == "azure_gov"
            - $TEST_SUITE == "gcp"
    dependencies:
        - test_functional_init_base_v16
        - test_functional_execute_base_v16
    needs:
        - test_functional_init_base_v16
        - test_functional_execute_base_v16

test_functional_cleanup_base_v15:
    <<: *test_functional_cleanup_generic
    services:
      - alias: mongo
        name: ${MONGODB_IMAGE}
    only:
        variables:
            - $TEST_SUITE == "base" && $BIGIP_VERSION == "15"
    variables:
        CLOUD: "base"
        MONGO_INITDB_ROOT_PASSWORD: "root"
        MONGO_INITDB_ROOT_USERNAME: "root"
    except:
        variables:
            - $TEST_SUITE == "azure"
            - $TEST_SUITE == "aws"
            - $TEST_SUITE == "azure_gov"
            - $TEST_SUITE == "gcp"
    dependencies:
        - test_functional_init_base_v15
        - test_functional_execute_base_v15
    needs:
        - test_functional_init_base_v15
        - test_functional_execute_base_v15

test_functional_cleanup_base_v14:
    <<: *test_functional_cleanup_generic
    services:
      - alias: mongo
        name: ${MONGODB_IMAGE}
    only:
        variables:
            - $TEST_SUITE == "base" && $BIGIP_VERSION == "14"
    variables:
        CLOUD: "base"
        MONGO_INITDB_ROOT_PASSWORD: "root"
        MONGO_INITDB_ROOT_USERNAME: "root"
    except:
        variables:
            - $TEST_SUITE == "azure"
            - $TEST_SUITE == "aws"
            - $TEST_SUITE == "azure_gov"
            - $TEST_SUITE == "gcp"
    dependencies:
        - test_functional_init_base_v14
        - test_functional_execute_base_v14
    needs:
        - test_functional_init_base_v14
        - test_functional_execute_base_v14

# End of Functional tests

# publish extension metadata to CDN
# if it has been updated locally
# note: assumes build_extension_metadata has been run
# in a previous stage and metadata file saved as an artifact
publish_extension_metadata:
    stage: publish
    image: ${ARTIFACTORY_SERVER}/dockerhub-remote/python:3.7
    script:
        # publish extension metadata to F5 CDN
        - CDN_FOLDER="f5-extension-metadata"
        - AUTH_OPTS="--username ${CDN_SVC_ACCOUNT_USER} --password ${CDN_SVC_ACCOUNT_PWD} --non-interactive"
        - svn co ${F5_CDN_SVN_ROOT}/cloudsolutions/${CDN_FOLDER} ${AUTH_OPTS}
        - cp scripts/metadata/${EXTENSION_METADATA_FILE} ${CDN_FOLDER}/latest/
        - cd ${CDN_FOLDER}
        # check for changes and commit to svn if true
        - svn diff
        - changed_files_count=$(svn diff --summarize | wc -l)
        - if [[ $changed_files_count -eq 1 ]]; then svn add --force latest/${EXTENSION_METADATA_FILE}; svn commit -m "F5 BIG-IP Runtime Init project automation - ${CI_COMMIT_REF_NAME}" ${AUTH_OPTS}; else echo "Metadata file is unchanged"; fi
    tags:
        - cm-official-docker-executor
    only:
        variables:
            - $PUBLISH_EXTENSION_METADATA == "true"

# Publish RPMs to CDN
publish_rpms_dev_cdn:
    stage: publish
    only:
        variables:
            - $CI_COMMIT_REF_NAME == "develop"
            - $PUBLISH_RPM_DEVELOP == "true"
            - $CI_COMMIT_MESSAGE =~ /smart:run_publish_develop_cdn/
    except:
        variables:
            - $RUN_FUNCTIONAL_TESTS == "true"
            - $CLEANUP_DEVELOP_CDN == "true"
            - $PUBLISH_EXTENSION_METADATA == "true"
    script:
        # publish dist rpms to F5 CDN into develop directory
        # install jq
        - echo "deb http://archive.debian.org/debian stretch main" > /etc/apt/sources.list
        - apt-get update
        - apt-get install -y jq
        # copy push rpms to cdn
        - VERSION=$(cat package.json | jq -r ".version")
        - RELEASE=$(cat package.json | jq -r ".release")
        - echo "Version:${VERSION}, Release:${RELEASE}"
        - CDN_FOLDER="f5-bigip-runtime-init"
        - AUTH_OPTS="--username ${CDN_SVC_ACCOUNT_USER} --password ${CDN_SVC_ACCOUNT_PWD} --non-interactive"
        - svn co ${F5_CDN_SVN_ROOT}/cloudsolutions/${CDN_FOLDER} ${AUTH_OPTS}
        - mkdir -p ${CDN_FOLDER}/develop/${CI_COMMIT_REF_NAME}
        - cp -r dist ${CDN_FOLDER}/develop/${CI_COMMIT_REF_NAME}
        - cd ${CDN_FOLDER}/develop
        - status=$(svn status)
        - echo "$status"
        - if echo "$status" | grep -F '?'; then svn add --force ${CI_COMMIT_REF_NAME}; else echo "No new directory to add"; fi
        - changed_files_count=$(svn diff --summarize | wc -l)
        - echo "$changed_files_count"
        - if [[ $changed_files_count -ge 1 ]]; then svn add --force ${CI_COMMIT_REF_NAME}/*; svn commit -m "F5 automation templates project automation - ${CI_COMMIT_REF_NAME}" ${AUTH_OPTS}; else echo "RPM files unchanged"; fi
    tags:
        - cm-official-docker-executor

publish_rpms_cdn:
    stage: release_publish
    only:
        - /(^publish-(\d+\.){1,2}(\d)-(\d+)?$)/
    script:
        # publish dist rpms to F5 CDN into $VERSION directory
        # install jq
        - echo "deb http://archive.debian.org/debian stretch main" > /etc/apt/sources.list
        - apt-get update
        - apt-get install -y jq
        # copy push rpms to cdn
        - VERSION=$(cat package.json | jq -r ".version")
        - RELEASE=$(cat package.json | jq -r ".release")
        - echo "Version:${VERSION}, Release:${RELEASE}"
        - CDN_FOLDER="f5-bigip-runtime-init"
        - AUTH_OPTS="--username ${CDN_SVC_ACCOUNT_USER} --password ${CDN_SVC_ACCOUNT_PWD} --non-interactive"
        - svn co ${F5_CDN_SVN_ROOT}/cloudsolutions/${CDN_FOLDER} ${AUTH_OPTS}
        - mkdir -p ${CDN_FOLDER}/v${VERSION}
        - cp -r dist ${CDN_FOLDER}/v${VERSION}
        - cd ${CDN_FOLDER}
        - status=$(svn status)
        - if echo "$status" | grep -F '?'; then svn add --force v${VERSION}; else echo "No new directory to add"; fi
        - changed_files_count=$(svn diff --summarize | wc -l)
        - if [[ $changed_files_count -ge 1 ]]; then svn add --force v${VERSION}/*; svn commit -m "F5 automation templates project automation - ${CI_COMMIT_REF_NAME}" ${AUTH_OPTS}; else echo "RPM files unchanged"; fi
    tags:
        - cm-official-docker-executor

publish_to_github:
    stage: release_publish
    only:
      - /(^publish-(\d+\.){1,2}(\d)-(\d+)?$)/
    script:
        # install jq
        - echo "deb http://archive.debian.org/debian stretch main" > /etc/apt/sources.list
        - apt-get update
        - apt-get install -y jq
        # Execute Release script to push source to github repo
        - ./scripts/publish_github.sh
